/*
 * NSSF NSSAI Availability
 *
 * NSSF NSSAI Availability Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package processor

import (
	"net/http"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/nssf/internal/logger"
	"github.com/free5gc/nssf/internal/plugin"
	"github.com/free5gc/nssf/internal/sbi/nssaiavailability"
	"github.com/free5gc/openapi"
	"github.com/free5gc/openapi/models"
)

// HandleNSSAIAvailabilityDelete - Deletes an already existing S-NSSAIs per TA
// provided by the NF service consumer (e.g AMF)
func (p *Processor) HandleNSSAIAvailabilityDelete(c *gin.Context) {
	logger.NssaiavailLog.Infof("Handle NSSAIAvailabilityDelete")

	nfId := c.Params.ByName("nfId")

	if nfId == "" {
		problemDetails := &models.ProblemDetails{
			Status: http.StatusBadRequest,
			Cause:  "UNSPECIFIED", // TODO: Check if this is the correct cause
		}

		c.JSON(http.StatusBadRequest, problemDetails)
		return
	}

	problemDetails := nssaiavailability.NfInstanceDelete(nfId)

	if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}

	c.Status(http.StatusNoContent)
}

// HandleNSSAIAvailabilityPatch - Updates an already existing S-NSSAIs per TA
// provided by the NF service consumer (e.g AMF)
func (p *Processor) HandleNSSAIAvailabilityPatch(c *gin.Context) {
	logger.NssaiavailLog.Infof("Handle NSSAIAvailabilityPatch")

	nfId := c.Params.ByName("nfId")

	if nfId == "" {
		problemDetails := &models.ProblemDetails{
			Status: http.StatusBadRequest,
			Cause:  "UNSPECIFIED", // TODO: Check if this is the correct cause
		}

		c.JSON(http.StatusBadRequest, problemDetails)
		return
	}

	var patchDocument plugin.PatchDocument

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetails := &models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
		}

		c.JSON(http.StatusInternalServerError, problemDetails)
		return
	}

	if err = openapi.Deserialize(&patchDocument, requestBody, "application/json"); err != nil {
		problemDetails := &models.ProblemDetails{
			Status: http.StatusBadRequest,
			Cause:  "UNSPECIFIED", // TODO: Check if this is the correct cause
		}

		logger.SBILog.Errorf("Error deserializing patch document: %+v", err)
		c.JSON(http.StatusBadRequest, problemDetails)
		return
	}

	// TODO: Request NfProfile of NfId from NRF
	//       Check if NfId is valid AMF and obtain AMF Set ID
	//       If NfId is invalid, return ProblemDetails with code 404 Not Found
	//       If NF consumer is not authorized to update NSSAI availability, return ProblemDetails with code 403 Forbidden

	info, problemDetails := nssaiavailability.NfInstancePatch(patchDocument, nfId)

	if info != nil {
		c.JSON(http.StatusOK, info)
		return
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}

	problemDetails = &models.ProblemDetails{
		Status: http.StatusForbidden,
		Cause:  "UNSPECIFIED", // TODO: Check if this is the correct cause
	}
	c.JSON(http.StatusForbidden, problemDetails)
}

// HandleNSSAIAvailabilityPut - Updates/replaces the NSSF
// with the S-NSSAIs the NF service consumer (e.g AMF) supports per TA
func (p *Processor) HandleNSSAIAvailabilityPut(c *gin.Context) {
	logger.NssaiavailLog.Infof("Handle NSSAIAvailabilityPut")

	nfId := c.Params.ByName("nfId")

	if nfId == "" {
		problemDetails := &models.ProblemDetails{
			Status: http.StatusBadRequest,
			Cause:  "UNSPECIFIED", // TODO: Check if this is the correct cause
		}

		c.JSON(http.StatusBadRequest, problemDetails)
		return
	}

	var nssaiAvailabilityInfo models.NssaiAvailabilityInfo
	data, err := c.GetRawData()
	if err != nil {
		problemDetails := &models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
		}

		c.JSON(http.StatusInternalServerError, problemDetails)
		return
	}

	if err = openapi.Deserialize(&nssaiAvailabilityInfo, data, "application/json"); err != nil {
		problemDetails := &models.ProblemDetails{
			Status: http.StatusBadRequest,
			Cause:  "UNSPECIFIED", // TODO: Check if this is the correct cause
		}

		logger.SBILog.Errorf("Error deserializing NSSAI availability info: %+v", err)
		c.JSON(http.StatusBadRequest, problemDetails)
		return
	}

	authorizedNssaiAvailabilityInfo, problemDetails := nssaiavailability.NfInstanceUpdate(nssaiAvailabilityInfo, nfId)

	if authorizedNssaiAvailabilityInfo != nil {
		c.JSON(http.StatusOK, authorizedNssaiAvailabilityInfo)
		return
	} else if problemDetails != nil {
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}

	problemDetails = &models.ProblemDetails{
		Status: http.StatusForbidden,
		Cause:  "UNSPECIFIED", // TODO: Check if this is the correct cause
	}
	c.JSON(http.StatusForbidden, problemDetails)
}
